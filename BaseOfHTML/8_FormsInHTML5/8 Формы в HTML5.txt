				Сброс введенных значений
В HTML-формах есть специальная кнопка, которая сбрасывает введённые значения и возвращает изначально установленные. Это поле ввода с типом reset.
Пример использования:
<input type="reset" value="Сбросить">
Обратите внимание, что кнопка не обнуляет значения, а возвращает те, которые были установлены в полях формы по умолчанию.

				Кнопка-изображение
В качестве кнопки отправки формы можно использовать изображение.

Для этого у тега input нужно указать тип image.

Аналогично обычным изображениям на сайте у кнопки-изображения есть еще два атрибута:

src	адрес изображения
alt	альтернативный текст, отображаемый в том случае, если изображение не загружено
Кнопка-изображение работает аналогично кнопке submit, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.

				Альтернативный способ задания кнопок тег <button>
Помимо тега <input> для добавления кнопок можно использовать тег <button>. Он расширяет возможности создания кнопок.
Внутри тега <button> можно размещать любые HTML-элементы, в том числе изображения. Например:
<button>Календарь <img src="calend.png" alt=""></button>
В данном случае кнопка будет выглядеть примерно вот так: Кнопка
Если в атрибуте type тега <button> указать значение submit или reset, то кнопка будет отправлять данные на сервер или сбрасывать введенные значения.
По умолчанию значение атрибута type — submit.
То есть внутри формы кнопка <button> по нажатию отправит форму на сервер.
Значениями атрибута type также могут быть button и reset.
Кнопка button со значением type="reset" аналогично input type="reset" сбрасывает значения полей формы к изначальным.
А вот значение type="button" избавит кнопку от всей изначальной функциональности. То есть кнопка просто будет выглядеть как кнопка, но ничего по умолчанию не делать. Это удобно, если вы хотите сами добавить кнопке дополнительное действие с помощью JavaScript.
-- Зачем прописывать input type="submit" если по умолчанию и так button? Значение submit отправляет данные на сервер, а button этого не делает.

				Обязательные поля
Сначала давайте разберёмся с обязательными полями. Чтобы указать, что поле обязательно для заполнения, нужно добавить ему пустой атрибут required:
<input type="text" required>

				Поле выбора даты
Поля для задания даты и времени уже поддерживаются в этих браузерах http://caniuse.com/#feat=input-datetime
В форму заказа важно включить поле даты доставки. А для выбора даты из календаря существует новый тип поля ввода — date. При клике на данное поле в форме всплывает календарик.
Пример записи:
<input type="date">
В Chrome это выглядит так:
Поле выбора даты в Chrome
Если браузер не поддерживает поле для ввода даты, то вместо него отображается обычное текстовое поле.

Неприятненько узнать о проблемах FireFox из коментов, а не из курса. Сделал, пошел дальше, не глядя в комменты (Chrome).. Радостно заюзал в реальном проекте. И узнать что календаря нет в FF на поздних стадиях, когда "все готово" (а не дай бог, когда уже в продашн пошло)? Что-бы не любил я лично, но "забить", на FF и Safari в реальной жизни - нынче позволить себе никто не может. Рассказывать пользователям "вбейте руками если у вас FF"?
Конечно все решаемо, когда предупрежден.
Modernizr - библиотека которая помогает выяснить чего не хватает у текущего браузера и подгружает полифилы (это такие .js костыли, которые реализуют то, что браузер не умеет сам).
Вот статейка где подробней http://www.area53.ru/javascript/chto-takoe-modernizr-i-kak-s-nim-rabotat.html (как раз пример с date есть там).

				Поле выбора времени
Поля для задания даты и времени уже поддерживаются в этих браузерах http://caniuse.com/#feat=input-datetime
В предыдущем задании мы рассмотрели использование тега <input> с типом date. Но иногда нужно указывать дату в других форматах, и для этого существуют дополнительные «временные» типы полей, например, time для выбора времени.

Используем поле выбора времени в нашей форме:

<input type="time">
В Chrome это выглядит так:
Если браузер не поддерживает поле для ввода времени, то вместо него отображается обычное текстовое поле.

				Список возможных значений
Для текстовых полей можно заранее определить список возможных значений, которые отображаются, когда вы начинаете вводить текст в поле. Для этого существует специальный тег <datalist>.
Пример использования:
<input type="text" list="browsers" name="browser">
<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>
В Chrome это выглядит так:
Список возможных значений в Chrome
Связывание текстового поля и списка осуществляется при помощи атрибута list у тега input — значение list должно быть таким же, как значение атрибута id у списка.
Если тег input имеет специфический тип, например email или другие, которые будут рассмотрены далее в курсе, то в списке отображаются только корректные для данного типа значения.