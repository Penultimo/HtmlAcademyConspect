				Сброс введенных значений
В HTML-формах есть специальная кнопка, которая сбрасывает введённые значения и возвращает изначально установленные. Это поле ввода с типом reset.
Пример использования:
<input type="reset" value="Сбросить">
Обратите внимание, что кнопка не обнуляет значения, а возвращает те, которые были установлены в полях формы по умолчанию.

				Кнопка-изображение
В качестве кнопки отправки формы можно использовать изображение.

Для этого у тега input нужно указать тип image.

Аналогично обычным изображениям на сайте у кнопки-изображения есть еще два атрибута:

src	адрес изображения
alt	альтернативный текст, отображаемый в том случае, если изображение не загружено
Кнопка-изображение работает аналогично кнопке submit, но на сервер дополнительно передаются координаты точки, по которой был произведен щелчок.

				Альтернативный способ задания кнопок тег <button>
Помимо тега <input> для добавления кнопок можно использовать тег <button>. Он расширяет возможности создания кнопок.
Внутри тега <button> можно размещать любые HTML-элементы, в том числе изображения. Например:
<button>Календарь <img src="calend.png" alt=""></button>
В данном случае кнопка будет выглядеть примерно вот так: Кнопка
Если в атрибуте type тега <button> указать значение submit или reset, то кнопка будет отправлять данные на сервер или сбрасывать введенные значения.
По умолчанию значение атрибута type — submit.
То есть внутри формы кнопка <button> по нажатию отправит форму на сервер.
Значениями атрибута type также могут быть button и reset.
Кнопка button со значением type="reset" аналогично input type="reset" сбрасывает значения полей формы к изначальным.
А вот значение type="button" избавит кнопку от всей изначальной функциональности. То есть кнопка просто будет выглядеть как кнопка, но ничего по умолчанию не делать. Это удобно, если вы хотите сами добавить кнопке дополнительное действие с помощью JavaScript.
-- Зачем прописывать input type="submit" если по умолчанию и так button? Значение submit отправляет данные на сервер, а button этого не делает.

				Обязательные поля
Сначала давайте разберёмся с обязательными полями. Чтобы указать, что поле обязательно для заполнения, нужно добавить ему пустой атрибут required:
<input type="text" required>

				Поле выбора даты
Поля для задания даты и времени уже поддерживаются в этих браузерах http://caniuse.com/#feat=input-datetime
В форму заказа важно включить поле даты доставки. А для выбора даты из календаря существует новый тип поля ввода — date. При клике на данное поле в форме всплывает календарик.
Пример записи:
<input type="date">
В Chrome это выглядит так:
Поле выбора даты в Chrome
Если браузер не поддерживает поле для ввода даты, то вместо него отображается обычное текстовое поле.

Неприятненько узнать о проблемах FireFox из коментов, а не из курса. Сделал, пошел дальше, не глядя в комменты (Chrome).. Радостно заюзал в реальном проекте. И узнать что календаря нет в FF на поздних стадиях, когда "все готово" (а не дай бог, когда уже в продашн пошло)? Что-бы не любил я лично, но "забить", на FF и Safari в реальной жизни - нынче позволить себе никто не может. Рассказывать пользователям "вбейте руками если у вас FF"?
Конечно все решаемо, когда предупрежден.
Modernizr - библиотека которая помогает выяснить чего не хватает у текущего браузера и подгружает полифилы (это такие .js костыли, которые реализуют то, что браузер не умеет сам).
Вот статейка где подробней http://www.area53.ru/javascript/chto-takoe-modernizr-i-kak-s-nim-rabotat.html (как раз пример с date есть там).

				Поле выбора времени
Поля для задания даты и времени уже поддерживаются в этих браузерах http://caniuse.com/#feat=input-datetime
В предыдущем задании мы рассмотрели использование тега <input> с типом date. Но иногда нужно указывать дату в других форматах, и для этого существуют дополнительные «временные» типы полей, например, time для выбора времени.

Используем поле выбора времени в нашей форме:

<input type="time">
В Chrome это выглядит так:
Если браузер не поддерживает поле для ввода времени, то вместо него отображается обычное текстовое поле.

				Список возможных значений
Для текстовых полей можно заранее определить список возможных значений, которые отображаются, когда вы начинаете вводить текст в поле. Для этого существует специальный тег <datalist>.
Пример использования:
<input type="text" list="browsers" name="browser">
<datalist id="browsers">
  <option value="Firefox"></option>
  <option value="Chrome"></option>
  <option value="Safari"></option>
</datalist>
В Chrome это выглядит так:
Список возможных значений в Chrome
Связывание текстового поля и списка осуществляется при помощи атрибута list у тега input — значение list должно быть таким же, как значение атрибута id у списка.
Если тег input имеет специфический тип, например email или другие, которые будут рассмотрены далее в курсе, то в списке отображаются только корректные для данного типа значения.

				Поле ввода числового значения
Для ввода числовых значений существует специальный тип поля ввода number. Рядом с полем браузер автоматически подставляет две стрелочки для увеличения и уменьшения числового значения.
Пример записи:
<input type="number">
При помощи вспомогательных атрибутов min и max можно установить верхнюю и нижнюю границу допустимых значений. А атрибут step устанавливает величину шага изменения значения.
Также стоит отметить, что поле ввода числа, как и некоторые другие поля, которые будут рассмотрены дальше, по-особому ведёт себя в мобильных браузерах: например, при фокусе на такое поле появляется клавиатура, позволяющая вводить соответствующие символы.

				Поле поиска
Пример записи:
<input type="search">
Это поле почти не отличается от обычного текстового поля. В некоторых браузерах внутри него появляется крестик для сброса введённого значения.

				Автофокус
При загрузке страницы можно сообщить браузеру в какое поле установить курсор по умолчанию. Для этого используется пустой атрибут autofocus.
Пример записи:
<input type="text" autofocus>
Автофокус улучшает процесс работы с формами, ведь пользователь избавляется от лишних щелчков мышки, там где они не нужны, а может сразу начинать вводить текст в поле.
Обратите внимание, что такой атрибут должен быть только один на странице.

				Другие поля для ввода дат
В предыдущих заданиях мы уже использовали поля с типами date и time, но существуют и другие типы полей для ввода дат:
datetime-local	выбор даты с указанием времени (без учета временной зоны)
week	выбор порядкового номера недели в году и года
month	выбор месяца и года
Используем поле для выбора месяца в нашей форме. А для выбора числа используем уже знакомый тип number.
Если браузер не поддерживает поле для ввода месяца, то вместо него отображается обычное текстовое поле.

				Выбор из диапазона
В нашей форме обязательно должна быть возможность выбрать количество дней, на которое будет осуществляться бронирование. Для этой цели подходит тип поля range.
Такое поле выглядит как шкала с ползунком и позволяет выбрать число из некоторого интервала значений.
Пример записи:
<input type="range" min="1" max="10">
Атрибуты min и max устанавливают нижнюю и верхнюю границу допустимых значений. А атрибут step устанавливает величину шага изменения значения.
Что бы отображалось количество дней: 
	    <div class="half-width">
            <label for="dayscount">Количество дней</label>
            1 <input oninput="out.value=(dney.value)" type="range" id="dney" min="1" max="14" step="1" value="8"> 14
            <br>
            <output id="out">8</output>
            </div>
Хороший пример: http://jsfiddle.net/CcqU7/222/

<input type="range" id="dayscount" name="dayscount" min="1" max="14" step="1"> 14
<output name="daysoutput"></output>
<form action="https://echo.htmlacademy.ru" method="post" oninput="daysoutput.value=dayscount.value">>
Что за oninput?
Почему в объяснении говорилось про JS и ни слова про связку с input?
Почему "daysoutput.value=dayscount.value"?
Почему в output мы указываем только name?
Как связываются output и input?
1. Атрибут событий oninput позволяет задать срабатывание скрипта, когда элемент получает ввод данных от пользователя.
2. В теории сказано: «мы добавим в форму область вывода, в которой будет отображаться количество дней, выбранное с помощью поля-ползунка.». Вот про связь с input.
3 и 5. daysoutput.value=dayscount.value как раз связывает значение output и input, то есть ползунка.
4. А что ещё нужно указать кроме name?

				Группировка полей формы
Когда формы становятся очень большими, возникает потребность зрительно отделить одни поля от других. Для группировки полей используется тег fieldset.
Пример:
<fieldset>
  <input type="text">
  <input type="text">
  <input type="text">
</fieldset>
<fieldset>
  <textarea></textarea>
</fieldset>
По умолчанию браузеры отображают результат в виде рамки вокруг этой группы полей, но при помощи CSS можно изменить его внешний вид.
Также для каждой группы можно добавить её заголовок. Для этого внутрь тега fieldset надо поместить тег legend:
<fieldset>
  <legend>Заголовок группы</legend>
  <input type="text">
</fieldset>

Не понимаю, что заставило <legend> расположиться не внутри рамки родителя (у него же display:block и position:static, то есть это же обычный "блочный элемент") а выехать на рамку родителя? Ну то есть, как бы "то что нужно", только кто несет отвественность за эту красоту? В .css-се не видно никакого позиционированя для fieldset legend
==> К legend по умолчанию применяются browser-specific стили, я их тоже не нашел при отладке в браузере. Стили довольно неприятные, т.к. перебить их можно только каким-нибудь хаком наподобие этого: https://jsfiddle.net/ghxuueqq/

					Паттерны значений полей

Итак, у нас готова форма бронирования отеля, но чтобы отправиться в Норвегию, Кексику нужно получить визу.
Естественно, ему лень идти в консульство и лично предъявлять там усы, лапы и хвост, поэтому он решает создать ещё одну форму, которая сможет отправить все необходимые данные по получению визы прямиком в лапы норвежского посла.
Ни для кого не секрет, что основным кошачьим документом является котопаспорт, в котором зафиксированы окрас кота, его личные данные и гастрономические предпочтения.
Поэтому первым делом добавим в форму поле для номера котопаспорта. Это обычное текстовое поле, но с ограничениями на формат номера, чтобы не злить лишний раз норвежского посла ошибками и опечатками.
Чтобы добавить автоматическую проверку формата номера в поле, используем атрибут pattern, в котором с помощью регулярного выражения опишем требуемый формат.
Подробнее о регулярных выражениях можно почитать, например, на Википедии http://ru.wikipedia.org/wiki/%D0%A0%D0%B5%D0%B3%D1%83%D0%BB%D1%8F%D1%80%D0%BD%D1%8B%D0%B5_%D0%B2%D1%8B%D1%80%D0%B0%D0%B6%D0%B5%D0%BD%D0%B8%D1%8F.

					Поле ввода телефона
Для получения визы нужно сообщить и номер телефона Кексика, поэтому добавим в форму ещё одно поле с типом tel.

Новый тип поля tel появился в HTML5 и отвечает за ввод телефонных номеров.
Также воспользуемся атрибутом pattern, чтобы исключить ошибки при заполнении формы.
В мобильных браузерах при фокусе на такое поле появляется клавиатура, позволяющая вводить только цифры и символы телефонных номеров.
===>если бы еще когда вводишь неправильное значение в сообщении отображался пример правильного...
а-то мало толку с этого типа
а еще лучше чтобы поле было изначальное наподобие такого (___)___-__
и просто его бы заполнялскрыть
==>согласен. частично можно решить проблему, добавив атрибут placeholder="0-000-000"

					Подсказка при заполнении полей
У полей, в которые вводятся текстовые значения (textarea, разные типы input и так далее) есть возможность вывести подсказку.
Для этого используется специальный атрибут placeholder:
<input type="text" placeholder="Текст подсказки">
Текст подсказки выводится внутри текстового поля, а при вводе значения — автоматически убирается.
Воспользуемся этим атрибутом, чтобы подсказывать в каком именно формате следует вводить номера котопаспорта и телефона.

					Поля ввода адресов сайтов и email
Вот поддержка браузерами полей для ввода email и полей для ввода адресов сайтов
В HTML5 добавлены два типа полей email и url, предназначенные для ввода электронной почты и адреса сайта. Особенностью этих полей является то, что они автоматически проверяют формат введённых данных.
Пример записи:
<input type="email">
<input type="url">
Внешне эти поля не отличаются от обычных текстовых полей, но обладают важной особенностью, которая очень полезна на мобильных устройствах.
Когда вы начинаете заполнять такое поле на мобильнике, там автоматически переключается раскладка клавиатуры. Например, для email отобразятся латинские символы, цифры, знак @ и некоторые другие. 

					Поле выбора цвета
Поля для выбора цвета уже поддерживаются в этих браузерах
Нельзя упускать из виду важный параметр кота — окрас. Его также нужно ввести в нашей форме.
В HTML5 добавили новый тип color, предназначенный для полей выбора цвета. При клике на такое поле появляется окно с возможностью выбрать цвет из палитры.
Пример записи:
<input type="color">

					Группировка элементов списка
Так как список выбора может быть довольно большой, в теге select используем возможность объединять option в группы. Обычно это используется для большей наглядности и удобства поиска нужного варианта.
Для формирования группы используется тег optgroup. Атрибут label этого тега определяет заголовок группы.
Пример использования:
<select name="variants">
  <optgroup label="Группа вариантов 1">
    <option value="1">Вариант 1</option>
    <option value="2">Вариант 2</option>
    <option value="3">Вариант 3</option>
  </optgroup>
  <optgroup label="Группа вариантов 2">
    <option value="4">Вариант 4</option>
    <option value="5">Вариант 5</option>
    <option value="6">Вариант 6</option>
  </optgroup>
</select>
Вложенность групп не ограничена, внутрь каждой группы можно вложить другие группы.
Аналогично можно группировать элементы и в списках со множественным выбором.

					Запрет редактирования полей
Иногда возникают ситуации, когда какие-то поля требуется сделать недоступными для редактирования.
Есть два способа: использование атрибута readonly и использование атрибута disabled
Пример записи:
<input type="text" readonly>
<input type="text" disabled>
В чем же отличие между ними?
Атрибут readonly не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Введенное значение можно выделить и скопировать. Данные из этого поля отправляются на сервер.
Атрибут disabled не дает пользователю изменять поле (вводить новый текст, модифицировать существующий). Нельзя поставить фокус в это поле, введенное значение нельзя выделять и копировать. Данные из этого поля НЕ отправляются на сервер.
ПОМОЩЬ ПО ЗАДАНИЮ: Как я понимаю на клиенте можно обойти любой из этих атрибутов [readonly/disabled] если с помощью DevTools удалить их из html страницы, после чего ввести в разблокированное поле что либо не допустимое
a few tricks to chrome 57.0.2987.133 attribute disabled on:
- поле type url и email можно выделять и копировать, но другие тут представленные нельзя, за исключением хака с "тройным кликом" который выделяет любое disabled поле
- если поле имеет атрибут disabled его можно выделить но не скопировать, это можно обойти выбрав из контекстного "найти" в google  возможно есть еще десятки разных трюков
-----
В блоке с теорией не помешало бы пояснение о функциональности таких атрибутов. А то как-то даже и не представляю, когда и зачем может понадобиться блокировать от клиента форму ввода. Она на то и форма ввода, чтобы передавать вводимые клиентом данные. В чем смысл?
===>когда вы делаете перевод денег в сбере онлайн, то заполнение форм идет в несколько этапов. И на каждом этапе многие формы становятся disabled. Напимер чтобы пользователь толстыми пальчиками не напутал циферки в своих же введенных полях))

					Управление автозаполнением полей
Браузер может запоминать значения, вводимые в текстовые поля. При вводе первых букв текста выводится список сохранённых ранее значений, из которого можно выбрать подходящее. Параметрами автозаполнения можно управлять используя атрибут autocomplete.

Он может принимать два значения on и off. Первое включает автозаполнение, второе — отключает. Отключение автозаполнения обычно используется из соображений безопасности, например, чтобы не сохранялись пароли, номера банковских карт и так далее.

Пример использования:

<input type="text" autocomplete="off">
Значение по умолчанию зависит от настроек браузера.

					Переключение между полями
При нажатии клавиши Tab браузер передает управление (фокус) от одного элемента к другому в том порядке, в котором они были объявлены на странице. Этим порядком можно управлять при помощи атрибута tabindex.
Пример записи:
<input type="text" tabindex="3">
В качестве значения может использоваться любое целое положительное число. Значения выстраиваются последовательно и переход между элементами происходит от меньшего значения к большему.
Если представлено отрицательное значение — элемент может быть выделен, однако не участвует в последовательной навигации
Если представлен 0 — элемент может быть выделен и достигнут с помощью последовательной навигации, однако порядок навигации определён платформой	

В HTML5 еще можно задать tabindex="-1", тогда при "обходе" формы tab'ом это поле будет пропущено. Иногда бывает полезно.
Интересно а как сделать зацикливание без JS, допустим только для формы, что бы из формы нельзя было выпрыгнуть...

Способ псевдо круговоротом не прокатил, кто умеет? 

<input type="text" placeholder="Формат номера XXX-XXXXX" tabindex="3" tabindex="6">

<label for="tel">Номер телефона</label>
<input type="tel" placeholder="Формат номера X-XXX-XXX" tabindex="2" tabindex="5">

<div class="half-width">
<label for="email">Email</label>
<input type="email" id="email" name="email" tabindex="1" tabindex="4">
</div>

					localStorage
Кексик наконец-то попал в Норвегию и во время путешествия начал вести путевые заметки. Даже создал для этого простую форму. Но из-за плохого интернета форму часто не удавалось отправить и введённая заметка терялась.

Как справиться с этой довольно часто встречающейся проблемой, когда введённые в форму данные теряются?

Для этого можно использовать одну из новинок HTML5 — localStorage. Эта технология относится к JavaScript, а не к HTML или CSS, но промолчать о ней мы не можем.

Суть localStorage или «локального хранилища» заключается в том, что в него можно записывать данные, которые будут сохраняться в браузере. Эти данные не исчезнут даже если вы закроете браузер и откроете его снова или уйдете со страницы и потом вернётесь на неё.

Получается, что можно сохранять данные из формы в хранилище при работе с формой, а при загрузке страницы проверять хранилище на наличие данных, и если они есть, то подставлять их в форму. Таким образом можно предотвратить потерю данных при работе с формами.

Давайте проверим работу localStorage. Это просто. Мы уже всё подготовили, вам осталось только раскомментировать один тег.

    <script>
      if (window.localStorage) {
        var elements = document.querySelectorAll('[name]');

        for (var i = 0, length = elements.length; i < length; i++) {
          (function(element) {
            var name = element.getAttribute('name');

            element.value = localStorage.getItem(name) || '';

            element.onkeyup = function() {
              localStorage.setItem(name, element.value);
            };
          })(elements[i]);
        }
      }
    </script>


Проверяем работу localStorage
На прошлом шаге вы раскомментировали скрипт, который сохранил данные из формы в локальное хранилище вашего браузера.

На этом шаге мы проверим, что данные действительно сохранились.

Для этого нужно раскомментировать тот же самый скрипт, что и в предыдущем шаге. И если у вас достаточно современный браузер, который поддерживает localStorage, то вы увидите в форме текущего задания ваш текст.

Заметьте, что в исходном коде задания тег <textarea> пуст, поэтому данные в форму могут попасть только из хранилища. Можете даже провести эксперимент: закрыть браузер, запустить его, открыть это задание, раскомментировать скрипт и убедиться, что сохранённый текст появится вновь.

Подробнее о localStorage и других возможностях HTML5, которые позволяют улучшить опыт взаимодействие с формами, вы можете прочитать в одноимённой статье в блоге Алексея Симоненко. http://simonenko.su/38146501854/improving-ux-for-web-form

